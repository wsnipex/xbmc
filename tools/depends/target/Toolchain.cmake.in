set(DEPENDS_PATH "@prefix@/@deps_dir@")
set(NATIVEPREFIX "@prefix@/@tool_dir@")

set(OS "@platform_os@")
set(CPU "@use_cpu@")
set(PLATFORM "@target_platform@")
if("${OS}" STREQUAL "linux" OR "${OS}" STREQUAL "android")
  set(CMAKE_SYSTEM_NAME Linux)
endif()

# set special CORE_SYSTEM_NAME
if("${OS}" STREQUAL "android")
  set(CORE_SYSTEM_NAME android)
elseif("${OS}" STREQUAL "osx")
  set(CORE_SYSTEM_NAME osx)
elseif("${OS}" STREQUAL "ios")
  set(CORE_SYSTEM_NAME ios)
  set(CMAKE_SYSTEM_NAME Darwin)
elseif("${PLATFORM}" STREQUAL "raspberry-pi")
  set(CORE_SYSTEM_NAME rbpi)
endif()

if("${OS}" STREQUAL "ios" OR "${OS}" STREQUAL "osx")
  set(CMAKE_OSX_SYSROOT @use_sdk_path@)
endif()
set(CMAKE_SYSTEM_VERSION 1)

# specify the cross compiler
set(CMAKE_C_COMPILER   @CC@)
set(CMAKE_CXX_COMPILER @CXX@)
set(CMAKE_AR @AR@ CACHE FILEPATH "Archiver")
set(CMAKE_LINKER @LD@ CACHE FILEPATH "Linker")

# where is the target environment
set(CMAKE_FIND_ROOT_PATH @prefix@/@deps_dir@)
set(CMAKE_LIBRARY_PATH @prefix@/@deps_dir@/lib)
if(NOT "@use_toolchain@" STREQUAL "")
  list(APPEND CMAKE_FIND_ROOT_PATH @use_toolchain@ @use_toolchain@/usr @use_toolchain@/sysroot/usr)
  set(CMAKE_LIBRARY_PATH "${CMAKE_LIBRARY_PATH}:@use_toolchain@/usr/lib/@use_host@:@use_toolchain@/lib/@use_host@")
endif()
if(NOT "@use_sdk_path@" STREQUAL "")
  list(APPEND CMAKE_FIND_ROOT_PATH @use_sdk_path@ @use_sdk_path@/usr)
endif()

# add RBPI's firmware directories
if("${CORE_SYSTEM_NAME}" STREQUAL "rbpi")
  list(APPEND CMAKE_FIND_ROOT_PATH @use_firmware@/opt/vc)
  list(APPEND CMAKE_LIBRARY_PATH @use_firmware@/opt/vc/lib)
  list(APPEND CMAKE_INCLUDE_PATH @use_firmware@/opt/vc/include)
endif()

# add Android directories and tools
if("${CORE_SYSTEM_NAME}" STREQUAL "android")
  set(NDKROOT @use_ndk@)
  set(SDKROOT @use_sdk_path@)
  set(SDK_PLATFORM @use_sdk@)
  string(REPLACE ":" ";" SDK_BUILDTOOLS_PATH "@build_tools_path@")
endif()

set(CMAKE_C_FLAGS "@platform_cflags@ @platform_includes@ -isystem @prefix@/@deps_dir@/include")
set(CMAKE_CXX_FLAGS "@platform_cxxflags@ @platform_includes@ -isystem @prefix@/@deps_dir@/include")
set(CMAKE_CPP_FLAGS "@platform_cflags@ @platform_includes@ -isystem @prefix@/@deps_dir@/include")
set(CMAKE_EXE_LINKER_FLAGS "-L@prefix@/@deps_dir@/lib @platform_ldflags@")
set(ENV{CFLAGS} ${CMAKE_C_FLAGS})
set(ENV{CXXFLAGS} ${CMAKE_CXX_FLAGS})
set(ENV{CPPFLAGS} ${CMAKE_CPP_FLAGS})
set(ENV{LDFLAGS} ${CMAKE_EXE_LINKER_FLAGS})
# search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(ENV{PKG_CONFIG_LIBDIR} @prefix@/@deps_dir@/lib/pkgconfig)

# Binary Addons
if(NOT OS STREQUAL "linux")
  set(ADDONS_PREFER_STATIC_LIBS ON)
endif()

# FFMPEG
set(ENABLE_INTERNAL_FFMPEG ON)
